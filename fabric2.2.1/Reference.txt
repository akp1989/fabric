export PATH=$PATH:${PWD}/bin
export FABRIC_CFG_PATH=${PWD}/configtx


(From v2.x Etcdraft is the default consensus)
configtxgen -profile OrgsOrdererGenesis -channelID sysgenchannel -outputBlock ./channelartifacts/genesis.block 

configtxgen -profile OrgsChannel -outputCreateChannelTx ./channelartifacts/testchannel.tx -channelID testchannel

configtxgen -profile OrgsChannel -outputAnchorPeersUpdate ./channelartifacts/Org1anchor.tx -channelID testchannel -asOrg Org1MSP
configtxgen -profile OrgsChannel -outputAnchorPeersUpdate ./channelartifacts/Org2anchor.tx -channelID testchannel -asOrg Org2MSP
configtxgen -profile OrgsChannel -outputAnchorPeersUpdate ./channelartifacts/Org3anchor.tx -channelID testchannel -asOrg Org3MSP
configtxgen -profile OrgsChannel -outputAnchorPeersUpdate ./channelartifacts/Org4anchor.tx -channelID testchannel -asOrg Org4MSP

cryptogen generate --config ./cryptogen/crypto-config.yaml --output ./crypto-config



peer channel fetch 0 ./channelartifacts/testchannel_decode.block -o orderer1.ceadar.org:7050 -c testchannel --tls --cafile /etc/hyperledger/fabric/msp/tlscacerts/tlsca-cert.pem
peer channel fetch config teschannelconfig.pb -o orderer1.ceadar.org:7050 -c testchannel --tls --cafile /etc/hyperledger/fabric/msp/tlscacerts/tlsca-cert.pem
configtxlator proto_decode --input genesis.block --type common.Block > genesis.json


export ORDERER_CA=/home/prabhakaran/workspace/fabric/fabric2.2.1/crypto/orderer/msp/tlscacerts/tlsca-cert.pem
export FABRIC_CFG_PATH=${PWD}/configtxorgcore
export PATH=$PATH:${PWD}/bin
export PEER_ORG1=" --peerAddresses localhost:7051 --tlsRootCertFiles ./crypto/org1/msp-tls-peer0/tlscacerts/tlsca-cert.pem"
export PEER_ORG2=" --peerAddresses localhost:9051 --tlsRootCertFiles ./crypto/org2/msp-tls-peer0/tlscacerts/tlsca-cert.pem"
export PEER_ORG3=" --peerAddresses localhost:11051 --tlsRootCertFiles ./crypto/org3/msp-tls-peer0/tlscacerts/tlsca-cert.pem"
export PEER_ORG4=" --peerAddresses localhost:13051 --tlsRootCertFiles ./crypto/org4/msp-tls-peer0/tlscacerts/tlsca-cert.pem"
export PEER_LIST="--peerAddresses localhost:7051 --tlsRootCertFiles ./crypto/org1/msp-tls-peer0/tlscacerts/tlsca-cert.pem --peerAddresses localhost:9051 --tlsRootCertFiles ./crypto/org2/msp-tls-peer0/tlscacerts/tlsca-cert.pem --peerAddresses localhost:11051 --tlsRootCertFiles ./crypto/org3/msp-tls-peer0/tlscacerts/tlsca-cert.pem --peerAddresses localhost:13051 --tlsRootCertFiles ./crypto/org4/msp-tls-peer0/tlscacerts/tlsca-cert.pem"

export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/crypto/org1/msp-tls-peer0/tlscacerts/tlsca-cert.pem
export CORE_PEER_MSPCONFIGPATH=${PWD}/crypto/org1/adminuser/msp
export CORE_PEER_ADDRESS=localhost:7051

peer channel create -o localhost:7050 -c testchannel -f ./channelartifacts/testchannel.tx --outputBlock ./channelartifacts/testchannel.block --tls true --cafile ${ORDERER_CA}
peer channel join -b ./channelartifacts/testchannel.block --tls --cafile ${ORDERER_CA}
peer channel update -o localhost:7050 -c testchannel -f ./channelartifacts/Org1anchor.tx --tls true --cafile ${ORDERER_CA}


export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="Org2MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/crypto/org2/msp-tls-peer0/tlscacerts/tlsca-cert.pem
export CORE_PEER_MSPCONFIGPATH=${PWD}/crypto/org2/adminuser/msp
export CORE_PEER_ADDRESS=localhost:9051

peer channel fetch 0 ./channelartifacts/testchannel.block -o localhost:7050 -c testchannel --tls --cafile ${ORDERER_CA}
peer channel join -b ./channelartifacts/testchannel.block --tls --cafile ${ORDERER_CA}
peer channel update -o localhost:7050 -c testchannel -f ./channelartifacts/Org2anchor.tx --tls true --cafile ${ORDERER_CA}


export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="Org3MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/crypto/org3/msp-tls-peer0/tlscacerts/tlsca-cert.pem
export CORE_PEER_MSPCONFIGPATH=${PWD}/crypto/org3/adminuser/msp
export CORE_PEER_ADDRESS=localhost:11051


peer channel fetch 0 ./channelartifacts/testchannel.block -o localhost:7050 -c testchannel --tls --cafile ${ORDERER_CA}
peer channel join -b ./channelartifacts/testchannel.block --tls --cafile ${ORDERER_CA}
peer channel update -o localhost:7050 -c testchannel -f ./channelartifacts/Org3anchor.tx --tls true --cafile ${ORDERER_CA}


export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="Org4MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/crypto/org4/msp-tls-peer0/tlscacerts/tlsca-cert.pem
export CORE_PEER_MSPCONFIGPATH=${PWD}/crypto/org4/adminuser/msp
export CORE_PEER_ADDRESS=localhost:13051

peer channel fetch 0 ./channelartifacts/testchannel.block -o localhost:7050 -c testchannel --tls --cafile ${ORDERER_CA}
peer channel join -b ./channelartifacts/testchannel.block --tls --cafile ${ORDERER_CA}
peer channel update -o localhost:7050 -c testchannel -f ./channelartifacts/Org4anchor.tx --tls true --cafile ${ORDERER_CA}


CC_RUNTIME_LANGUAGE = golang/javascript/java/typescript

go:
	CC_RUNTIME_LANGUAGE=golang
	pushd ../chaincode/fabcar/go
	GO111MODULE=on go mod vendor
	popd
javascript:
	CC_RUNTIME_LANGUAGE=node
java:
	CC_RUNTIME_LANGUAGE=java
	pushd ../chaincode/fabcar/java
	./gradlew installDist
	popd
typescript:
	CC_RUNTIME_LANGUAGE=node
	pushd ../chaincode/fabcar/typescript
	npm install
	npm run build
	popd


export CC_RUNTIME_LANGUAGE=node
export CHANNEL_NAME="testchannel"
export PACKAGE_ID="blockchain-smart-contracts_0.0.3:884ca288c9911f52206533e8580af2e9d4e94cf29d0b456cb54b7ef2a4aefe05"
export SEQUENCE="1"
export VERSION="0.0.1"

peer lifecycle chaincode package ./chaincode/blockchain-smart-contracts.tar.gz --path ./chaincode/blockchain-smart-contracts --lang ${CC_RUNTIME_LANGUAGE} --label blockchain-smart-contracts_${VERSION}

peer lifecycle chaincode install ./chaincode/blockchain-smart-contracts.tar.gz

peer lifecycle chaincode queryinstalled 

peer lifecycle chaincode approveformyorg -o localhost:7050 --tls true --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name blockchain-smart-contracts --version ${VERSION} --package-id ${PACKAGE_ID} --sequence ${SEQUENCE} --collections-config ./chaincode/blockchain-smart-contracts.json --signature-policy "OR('Org1MSP.peer', 'Org2MSP.peer', 'Org3MSP.peer', 'Org4MSP.peer')"

peer lifecycle chaincode queryapproved --channelID $CHANNEL_NAME --name blockchain-smart-contracts

peer lifecycle chaincode checkcommitreadiness --channelID $CHANNEL_NAME --name blockchain-smart-contracts --version ${VERSION} --sequence ${SEQUENCE} --output json --init-required

peer lifecycle chaincode commit -o localhost:7050 --tls true --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name blockchain-smart-contracts $PEER_LIST --version ${VERSION} --sequence ${SEQUENCE} --collections-config ./chaincode/blockchain-smart-contracts.json --signature-policy "OR('Org1MSP.peer', 'Org2MSP.peer', 'Org3MSP.peer', 'Org4MSP.peer')"

export DATA=$(echo -n "10" | base64 | tr -d \\n)
peer chaincode invoke -o localhost:7050 --tls true --cafile ${ORDERER_CA} -C ${CHANNEL_NAME} -n blockchain-smart-contracts $PEER_LIST -c '{"Function":"ProductKeyBatchRequestContract:createProductKeyBatchRequest","Args":["ProductKeyBatchRequestId:2","Org2MSP","Org2MSP"]}' --transient "{\"sku\":\"$DATA\",\"quantity\":\"$DATA\",\"batchID\":\"$DATA\"}"
peer chaincode invoke -o localhost:7050 --tls true --cafile ${ORDERER_CA} -C ${CHANNEL_NAME} -n blockchain-smart-contracts $PEER_LIST -c '{"Function":"ProductKeyContract:createProductKey","Args":["ProductKey:1","Org!MSP","Org2MSP"]}' --transient "{\"keyNumber\":\"$DATA\",\"sKU\":\"$DATA\",\"batchID\":\"$DATA\"}"


peer chaincode query -C ${CHANNEL_NAME} -n blockchain-smart-contracts -c '{"Function":"ProductKeyBatchRequestContract:readProductKeyBatchRequest","Args":["ProductKeyBatchRequestId:1"]}'
peer chaincode query -C ${CHANNEL_NAME} -n blockchain-smart-contracts -c '{"Function":"ProductKeyContract:productKeyExists","Args":["ProductKey:1"]}'



export CC_RUNTIME_LANGUAGE=golang
export CHANNEL_NAME="testchannel"
export PACKAGE_ID="marblespvt_1.0:c921ba75f3e0776611fac9c15bce7247a99fa3c8ebfe5d29cb9cdaafe42d481c"
export SEQUENCE="1"

GO111MODULE=on go mod vendor

peer lifecycle chaincode package ./chaincode/marblespvt.tar.gz --path ./chaincode/marbles02_private/go --lang ${CC_RUNTIME_LANGUAGE} --label marblespvt_1.0

peer lifecycle chaincode install ./chaincode/marblespvt.tar.gz

peer lifecycle chaincode approveformyorg -o localhost:7050 --tls true --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name marblespvt --version 1 --init-required --package-id ${PACKAGE_ID} --sequence ${SEQUENCE} --collections-config ./chaincode/marbles02_private/collections_config.json

peer lifecycle chaincode commit -o localhost:7050 --tls true --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name marblespvt $PEER_LIST --version 1 --sequence ${SEQUENCE} --init-required --collections-config ./chaincode/marbles02_private/collections_config.json

peer lifecycle chaincode checkcommitreadiness --channelID $CHANNEL_NAME --name marblespvt --version 1 --sequence ${SEQUENCE} --output json --init-required


export CC_RUNTIME_LANGUAGE=java
export CHANNEL_NAME="testchannel"
export PACKAGE_ID="privateasset_1.0:96164cdaccf80aace19ea5b415625f1f93161cdc17aed83d2715e17d14708e79"
export SEQUENCE="0"
export VERSION="1.0"

peer lifecycle chaincode package ./chaincode/privateasset.tar.gz --path ./chaincode/PrivateAsset --lang ${CC_RUNTIME_LANGUAGE} --label privateasset_${VERSION}

peer lifecycle chaincode install ./chaincode/privateasset.tar.gz

peer lifecycle chaincode approveformyorg -o localhost:7050 --tls true --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name privateasset --version ${VERSION} --package-id ${PACKAGE_ID} --sequence ${SEQUENCE} --signature-policy "OR('Org1MSP.peer', 'Org2MSP.peer', 'Org3MSP.peer', 'Org4MSP.peer')"

peer lifecycle chaincode commit -o localhost:7050 --tls true --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name privateasset $PEER_LIST --version ${VERSION} --sequence ${SEQUENCE} --signature-policy "OR('Org1MSP.peer', 'Org2MSP.peer', 'Org3MSP.peer', 'Org4MSP.peer')"

peer lifecycle chaincode checkcommitreadiness --channelID $CHANNEL_NAME --name privateasset --version ${VERSION} --sequence ${SEQUENCE} --output json 

/******************************************************************************************************
/* Creating the records for the first time:
/* 
/*  1)State based endorsement policy needs both Initiator and Org4 to sign the endorsemnt
/*  2)Implicit policy states that Intiator will only have access to private data
/******************************************************************************************************
export ASSETPRICE=$(echo -n "price-00" | base64 | tr -d \\n)
peer chaincode invoke -o localhost:7050 --tls true --cafile ${ORDERER_CA} -C ${CHANNEL_NAME} -n privateasset $PEER_LIST -c '{"Function":"AssetContract:assetCreate","Args":["assetNo:1","org1","Called from org1 - ep of both org1 and org4"]}' --transient "{\"assetPrice\":\"$ASSETPRICE\"}"
peer chaincode invoke -o localhost:7050 --tls true --cafile ${ORDERER_CA} -C ${CHANNEL_NAME} -n privateasset $PEER_LIST -c '{"Function":"AssetContract:assetCreate","Args":["assetNo:2","org2","Called from org2 - ep of both org2 and org4"]}' --transient "{\"assetPrice\":\"$ASSETPRICE\"}"
peer chaincode invoke -o localhost:7050 --tls true --cafile ${ORDERER_CA} -C ${CHANNEL_NAME} -n privateasset $PEER_LIST -c '{"Function":"AssetContract:assetCreate","Args":["assetNo:3","org3","Called from org3 - ep of both org3 and org4"]}' --transient "{\"assetPrice\":\"$ASSETPRICE\"}"
peer chaincode invoke -o localhost:7050 --tls true --cafile ${ORDERER_CA} -C ${CHANNEL_NAME} -n privateasset $PEER_LIST -c '{"Function":"AssetContract:assetCreate","Args":["assetNo:4","org4","Called from org4 - ep of only org4"]}' --transient "{\"assetPrice\":\"$ASSETPRICE\"}"

/******************************************************************************************************************************
/* Updating the transaction
/*  1) State based endorsement says Intiator and Org4 should sign
/*       So always address the invoke to Initiator and Org4 always 
/*       Always initiated the invoke the transaction from Initiator or Org4 (any orgs in the state level endorsement policy)  
/******************************************************************************************************************************
peer chaincode invoke -o localhost:7050 --tls true --cafile ${ORDERER_CA} -C ${CHANNEL_NAME} -n privateasset $PEER_ORG1 $PEER_ORG4 -c '{"Function":"AssetContract:assetUpdate","Args":["assetNo:1","Call from org1 or org4 addressing org1 and org4"]}' 
peer chaincode invoke -o localhost:7050 --tls true --cafile ${ORDERER_CA} -C ${CHANNEL_NAME} -n privateasset $PEER_ORG2 $PEER_ORG4 -c '{"Function":"AssetContract:assetUpdate","Args":["assetNo:2","Call from org2 or org4 addressing org2 and org4"]}' 
peer chaincode invoke -o localhost:7050 --tls true --cafile ${ORDERER_CA} -C ${CHANNEL_NAME} -n privateasset $PEER_ORG3 $PEER_ORG4 -c '{"Function":"AssetContract:assetUpdate","Args":["assetNo:3","Call from org3 or org4 addressing org3 and org4"]}' 
peer chaincode invoke -o localhost:7050 --tls true --cafile ${ORDERER_CA} -C ${CHANNEL_NAME} -n privateasset $PEER_ORG4 -c '{"Function":"AssetContract:assetUpdate","Args":["assetNo:4","Call from org4 addressing org4"]}' 

/***********************************************************************************************************************************
/* Updating the private data 
/*  1) State based endorsement says Intiator and Org4 should sign
/*       So always address the invoke to Initiator and Org4 always 
/*       Always initiated the invoke the transaction from Initiator or Org4 (any orgs in the state level endorsement policy) 
/*  2) Implicit policy States that only the Initiator has access to the private data
/*  
/* <Since all implicit policy states for first three asset needs two organization endorsement the private data update cannot be made
/*  Fourth asset's private data can be updated since 
/*      Implicit data policy allows only org4 to access the private data so address the invoke to org4
/*      State based endorsement gets satisfied since Initiator is also org4 so ep is Org4 and Org4
/************************************************************************************************************************************
peer chaincode invoke -o localhost:7050 --tls true --cafile ${ORDERER_CA} -C ${CHANNEL_NAME} -n privateasset $PEER_ORG4 -c '{"Function":"AssetContract:assetUpdatePrivate","Args":["assetNo:4","price00-Update1 from org4"]}' 

/************************************************************************************************************************************
/* Checking the private hash against the passed information
/*
/*  A) Hash the transient object with SHA-256  
/*  B) Encode hashed object and the private data with UTF_8 and compare them
/*
/************************************************************************************************************************************
export ASSETPRICE=$(echo -n "price-000" | base64 | tr -d \\n)
peer chaincode invoke -o localhost:7050 --tls true --cafile ${ORDERER_CA} -C ${CHANNEL_NAME} -n privateasset $PEER_ORG1 -c '{"Function":"AssetContract:assetVerifyHash","Args":["assetNo:4","org4","Org4MSP"]}' --transient "{\"assetPrice\":\"$ASSETPRICE\"}"

/************************************************************
/* Querying the public world state
/*
/*
/************************************************************
peer chaincode query -C ${CHANNEL_NAME} -n privateasset -c '{"Function":"AssetContract:assetRead","Args":["assetNo:1"]}'
peer chaincode query -C ${CHANNEL_NAME} -n privateasset -c '{"Function":"AssetContract:assetRead","Args":["assetNo:2"]}'
peer chaincode query -C ${CHANNEL_NAME} -n privateasset -c '{"Function":"AssetContract:assetRead","Args":["assetNo:3"]}'
peer chaincode query -C ${CHANNEL_NAME} -n privateasset -c '{"Function":"AssetContract:assetRead","Args":["assetNo:4"]}'

/************************************************************
/* Querying the private data
/*
/*
/************************************************************
peer chaincode query -C ${CHANNEL_NAME} -n privateasset -c '{"Function":"AssetContract:assetReadPrivate","Args":["assetNo:1"]}'
peer chaincode query -C ${CHANNEL_NAME} -n privateasset -c '{"Function":"AssetContract:assetReadPrivate","Args":["assetNo:2"]}'
peer chaincode query -C ${CHANNEL_NAME} -n privateasset -c '{"Function":"AssetContract:assetReadPrivate","Args":["assetNo:3"]}'
peer chaincode query -C ${CHANNEL_NAME} -n privateasset -c '{"Function":"AssetContract:assetReadPrivate","Args":["assetNo:4"]}'


KeyEndorsementPolicies	
type KeyEndorsementPolicy interface , func NewStateEP(policy []byte) (KeyEndorsementPolicy, error)


Old Ref:

export ORDERER_CA="/etc/hyperledger/fabric/msp/tlscacerts/tlsca-cert.pem"
export CHANNEL_NAME="testchannel"
export PACKAGE_ID="fabcar_1:762e0fe3dbeee0f7b08fb6200adeb4a3a20f649a00f168c0b3c2257e53b6e506"
export SEQUENCE="1"

peer lifecycle chaincode install ./chaincode/fabcar.tar.gz

peer lifecycle chaincode approveformyorg -o localhost:7050 --tls --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name fabcar --version 1 --init-required --package-id fabcar_1:762e0fe3dbeee0f7b08fb6200adeb4a3a20f649a00f168c0b3c2257e53b6e506 --sequence 1
peer lifecycle chaincode approveformyorg -o localhost:7050 --tls --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name fabcar --version 1 --init-required --package-id fabcar_1:762e0fe3dbeee0f7b08fb6200adeb4a3a20f649a00f168c0b3c2257e53b6e506 --sequence 1 --signature-policy "OR('Org1MSP.peer', 'Org2MSP.peer', 'Org3MSP.peer', 'Org4MSP.peer')"

peer lifecycle chaincode checkcommitreadiness --channelID $CHANNEL_NAME --name fabcar --version 1 --sequence 1 --output json --init-required

peer lifecycle chaincode commit -o localhost:7050 --tls --cafile ${ORDERER_CA} --channelID $CHANNEL_NAME --name fabcar $PEER_LIST --version 1 --sequence 1 --init-required --signature-policy "OR('Org1MSP.peer', 'Org2MSP.peer', 'Org3MSP.peer', 'Org4MSP.peer')"

peer chaincode invoke -o localhost:7050 --tls --cafile ${ORDERER_CA} --channelID $CHANNEL_NAME -n fabcar $PEER_LIST --isInit -c '{"function":"initLedger","Args":[]}'

peer chaincode query -C $CHANNEL_NAME  -n fabcar -c '{"Args":["queryAllCars"]}'

